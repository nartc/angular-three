// GENERATED - AngularThree v<%= ngtVersion %>
import {
    NgtAnyConstructor,
    NgtCommonHelper,
    provideNgtCommonHelper,
    provideCommonHelperRef,
    NgtObservableInput,<% if (hasBooleanInput) { %>coerceBoolean, NgtBooleanInput,<% } %><% if (hasNumberInput) { %> coerceNumber, NgtNumberInput,<% } %>
} from '@angular-three/core';<% if (hasBooleanInput || hasNumberInput) { %>
import { isObservable, map } from 'rxjs';<% } %>
import { Component, Input } from '@angular/core';
import * as THREE from 'three';

@Component({
    selector: 'ngt-<%= fileName %>',
    standalone: true,
    template: '<ng-content></ng-content>',
    providers: [
        provideNgtCommonHelper(Ngt<%= name %>),
        provideCommonHelperRef(Ngt<%= name %>)
    ],
})
export class Ngt<%= name %> extends NgtCommonHelper<THREE.<%= name %>> {
    static ngAcceptInputType_args:
        | ConstructorParameters<typeof THREE.<%= name %>>
        | undefined;

    <% for (const input of inputs) { %>
    @Input() <% if (input.shouldOverride) { %>override <% } %>set <%= input.name %>(<%= input.name %>: NgtObservableInput<<% if (input.isBooleanInput) { %>NgtBooleanInput<% } else if (input.isNumberInput) { %>NgtNumberInput<% } else { %><%= input.type %><% } %>>) {
        this.set({ <% if (input.isBooleanInput || input.isNumberInput) { %><%= input.name %>: <% if (input.isNumberInput) { %>isObservable(<%= input.name %>) ? <%= input.name %>.pipe(map(coerceNumber)) : coerceNumber(<%= input.name %>)<% } else { %>isObservable(<%= input.name %>) ? <%= input.name %>.pipe(map(coerceBoolean)) : coerceBoolean(<%= input.name %>)<% } %><% } else { %><%= input.name %><% } %> });
    }
    <% } %>

    override get helperType(): NgtAnyConstructor<THREE.<%= name %>> {
        return THREE.<%= name %>;
    }

    <% if (hasInput) { %>
    override get optionsFields() {
        return [
            ...super.optionsFields,<% for (const input of inputs) { %>
           '<%= input.name %>',<% } %>
        ];
    }<% } %>
}
