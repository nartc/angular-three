// GENERATED - AngularThree v<%= ngtVersion %>
import {
  NgtAnyConstructor,<% if (extraArgs) { %>
  NgtUnknownRecord,<% } %>
  NgtObservableInput,<% if (hasBooleanInput) { %>coerceBoolean, NgtBooleanInput,<% } %><% if (hasNumberInput) { %> coerceNumber, NgtNumberInput,<% } %>
} from '@angular-three/core';
import {
  NgtCommonEffect,
  provideCommonEffectRef,
  provideNgtCommonEffect,
} from '@angular-three/postprocessing';<% if (hasBooleanInput || hasNumberInput) { %>
import { isObservable, map } from 'rxjs';<% } %>
import { Directive<% if (hasInput) { %>, Input<% } %> } from '@angular/core';
import { <% if (blendFunction) { %>BlendFunction,<% } %> <%= name %><% for (const extraImport of extraImports) {%>,<%= extraImport %><% } %> } from 'postprocessing';

@Directive({
  selector: 'ngt-<%= fileName %>',
  standalone: true,
  providers: [
    provideNgtCommonEffect(Ngt<%= name %>),
    provideCommonEffectRef(Ngt<%= name %>)
  ],
})
export class Ngt<%= name %> extends NgtCommonEffect<<%= name %>> {
  override get effectType(): NgtAnyConstructor<<%= name %>> {
    return <%= name %>;
  }
  <% for (const input of inputs) { %>
  @Input() <% if (input.shouldOverride) { %>override <% } %>set <%= input.name %>(<%= input.name %>: NgtObservableInput<<% if (input.isBooleanInput) { %>NgtBooleanInput<% } else if (input.isNumberInput) { %>NgtNumberInput<% } else { %><%= input.type %><% } %>>) {
      this.set({ <% if (input.isBooleanInput || input.isNumberInput) { %><%= input.name %>: <% if (input.isNumberInput) { %>isObservable(<%= input.name %>) ? <%= input.name %>.pipe(map(coerceNumber)) : coerceNumber(<%= input.name %>)<% } else { %>isObservable(<%= input.name %>) ? <%= input.name %>.pipe(map(coerceBoolean)) : coerceBoolean(<%= input.name %>)<% } %><% } else { %><%= input.name %><% } %> });
  }
  <% } %>
  <% if (extraArgs) { %>
  override initEffectArgs() {
    const [props] = super.initEffectArgs();
    const extraArgs = [];
    for (const extra of this.extraEffectArgs) {
      const value = extra.fromComposer
        ? this.effectComposer.getState(s => s[extra.name])
        : this.getState(s => s[extra.name]);
      extraArgs.push(value);
      delete (props as NgtUnknownRecord)[extra.name];
    }

    return [...extraArgs, props];
  }
  override get extraEffectArgs() {
    return [
      ...super.extraEffectArgs,<% for (const extraArg of extraArgs) { %>
      { name: '<%= extraArg.name %>'<% if (extraArg.fromComposer) { %>, fromComposer: <%= extraArg.fromComposer %> <% } %> },<% } %>
    ];
  }<% } %>
  <% if (blendFunction) { %>
  override get defaultBlendMode(): BlendFunction {
      return BlendFunction.<%= blendFunction %>;
  }<% } %>
  <% if (hasInput) { %>
  override get effectPropFields(): string[] {
    return [
      ...super.effectPropFields,<% for (const input of inputs) { %>
      '<%= input.name %>',<% } %>
    ];
  }<% } %>
}
