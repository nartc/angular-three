// GENERATED
import { AnyConstructor,<% if (hasBooleanInput) { %>coerceBooleanProperty, BooleanInput,<% } %><% if (hasNumberInput) { %> coerceNumberProperty, NumberInput,<% } %> } from '@angular-three/core';
import {
    NgtCommonEffect,
    provideNgtCommonEffect,
    provideCommonEffectRef,
} from '@angular-three/postprocessing';
import { ChangeDetectionStrategy, Component, NgModule<% if (hasInput) { %>, Input<% } %> } from '@angular/core';
import { <% if (blendFunction) { %>BlendFunction,<% } %> <%= name %><% for (const extraImport of extraImports) {%>,<%= extraImport %><% } %> } from 'postprocessing';

@Component({
    selector: 'ngt-<%= fileName %>',
    standalone: true,
    template: `<ng-content></ng-content>`,
    changeDetection: ChangeDetectionStrategy.OnPush,
    providers: [
        provideNgtCommonEffect(Ngt<%= name %>),
        provideCommonEffectRef(Ngt<%= name %>)
    ],
})
export class Ngt<%= name %> extends NgtCommonEffect<<%= name %>> {
    override get effectType(): AnyConstructor<<%= name %>> {
        return <%= name %>;
    }
    <% for (const input of inputs) { %>
    @Input() <% if (input.shouldOverride) { %>override <% } %>set <%= input.name %>(<%= input.name %>: <% if (input.isBooleanInput) { %>BooleanInput<% } else if (input.isNumberInput) { %>NumberInput<% } else { %><%= input.type %><% } %>) {
        this.set({ <% if (input.isBooleanInput || input.isNumberInput) { %><%= input.name %>: <% if (input.isNumberInput) { %>coerceNumberProperty<% } else { %>coerceBooleanProperty<% } %>(<%= input.name %>)<% } else { %><%= input.name %><% } %> });
    }
    <% } %>
    <% if (blendFunction) { %>
    protected override get defaultBlendMode(): BlendFunction {
        return BlendFunction.<%= blendFunction %>;
    }<% } %>
    <% if (hasInput) { %>
    protected override get effectOptionsFields(): Record<string, boolean> {
        return {
            ...super.effectOptionsFields,<% for (const input of inputs) { %>
            <%= input.name %>: <%= input.isOptional %>,<% } %>
        };
    }<% } %>

}

@NgModule({
    imports: [Ngt<%= name %>],
    exports: [Ngt<%= name %>],
})
export class Ngt<%= name %>Module {}
