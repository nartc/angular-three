"use strict";(self.webpackChunklibs_documentations=self.webpackChunklibs_documentations||[]).push([[482],{9613:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=o,d=m["".concat(s,".").concat(u)]||m[u]||h[u]||r;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2391:function(e,t,n){n.d(t,{Z:function(){return i}});var a=n(9496),o=n(5924),r="tabItem_C2GR";function i(e){var t=e.children,n=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,i),hidden:n},t)}},9347:function(e,t,n){n.d(t,{Z:function(){return u}});var a=n(2081),o=n(9496),r=n(5924),i=n(1296),l=n(2024),s=n(5065),c=n(5271),p="tabList_LTMs",h="tabItem_Q2DR";function m(e){var t,n,i=e.lazy,m=e.block,u=e.defaultValue,d=e.values,g=e.groupId,y=e.className,b=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=d?d:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,l.l)(f,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===u?u:null!=(t=null!=u?u:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?t:b[0].props.value;if(null!==k&&!f.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,s.U)(),w=N.tabGroupChoices,x=N.setTabGroupChoices,T=(0,o.useState)(k),P=T[0],C=T[1],S=[],I=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var O=w[g];null!=O&&O!==P&&f.some((function(e){return e.value===O}))&&C(O)}var B=function(e){var t=e.currentTarget,n=S.indexOf(t),a=f[n].value;a!==P&&(I(t),C(a),null!=g&&x(g,String(a)))},E=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,o=S.indexOf(e.currentTarget)+1;n=null!=(a=S[o])?a:S[0];break;case"ArrowLeft":var r,i=S.indexOf(e.currentTarget)-1;n=null!=(r=S[i])?r:S[S.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",p)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":m},y)},f.map((function(e){var t=e.value,n=e.label,i=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:P===t?0:-1,"aria-selected":P===t,key:t,ref:function(e){return S.push(e)},onKeyDown:E,onFocus:B,onClick:B},i,{className:(0,r.Z)("tabs__item",h,null==i?void 0:i.className,{"tabs__item--active":P===t})}),null!=n?n:t)}))),i?(0,o.cloneElement)(b.filter((function(e){return e.props.value===P}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},b.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==P})}))))}function u(e){var t=(0,i.Z)();return o.createElement(m,(0,a.Z)({key:String(t)},e))}},2741:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return c},metadata:function(){return h},toc:function(){return u}});var a=n(2081),o=n(4604),r=(n(9496),n(9613)),i=n(9347),l=n(2391),s=["components"],c={id:"first-physics-scene",title:"First Physics Scene",sidebar_label:"First Physics Scene"},p=void 0,h={unversionedId:"cannon/first-physics-scene",id:"cannon/first-physics-scene",title:"First Physics Scene",description:"In this tutorial, we are going to build a simple scene with physics, specifically with @angular-three/cannon to learn its API",source:"@site/docs/cannon/first-physics-scene.mdx",sourceDirName:"cannon",slug:"/cannon/first-physics-scene",permalink:"/docs/cannon/first-physics-scene",draft:!1,editUrl:"https://github.com/nartc/angular-three/tree/main/libs/documentations/docs/docs/cannon/first-physics-scene.mdx",tags:[],version:"current",frontMatter:{id:"first-physics-scene",title:"First Physics Scene",sidebar_label:"First Physics Scene"},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/cannon/overview"},next:{title:"Physics",permalink:"/docs/cannon/physics"}},m={},u=[{value:"Setup Canvas",id:"setup-canvas",level:2},{value:"Add Physics container",id:"add-physics-container",level:2},{value:"Add a floor",id:"add-a-floor",level:2},{value:"Add a box",id:"add-a-box",level:2},{value:"Exercise",id:"exercise",level:2}],d={toc:u};function g(e){var t=e.components,n=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this tutorial, we are going to build a simple scene with physics, specifically with ",(0,r.kt)("inlineCode",{parentName:"p"},"@angular-three/cannon")," to learn its API"),(0,r.kt)("p",null,"Let's take a peak at what we're going to create"),(0,r.kt)("iframe",{class:"code-demo",src:"https://codesandbox.io/embed/simple-physic-cubes-em5xnj?fontsize=14&hidenavigation=1&theme=dark&view=preview",title:"simple-physic-cubes",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),(0,r.kt)("h2",{id:"setup-canvas"},"Setup Canvas"),(0,r.kt)("p",null,"We'll set up our ",(0,r.kt)("inlineCode",{parentName:"p"},"ngt-canvas")," with some lighting configurations"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"physicsHtml",label:"physic-boxes.component.html",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-canvas shadows [dpr]="[1, 2]" [gl]="{ alpha: false }" [camera]="{ position: [-1, 5, 5], fov: 45 }">\n  \x3c!-- \ud83d\udc47 makes our Scene.background lightblue --\x3e\n  <ngt-color attach="background" color="lightblue"></ngt-color>\n\n  \x3c!-- \ud83d\udc47 add some lights --\x3e\n  <ngt-ambient-light></ngt-ambient-light>\n  <ngt-directional-light [position]="10" castShadow>\n    <ngt-vector2 [attach]="[\'shadow\', \'mapSize\']" [vector2]="2048"></ngt-vector2>\n  </ngt-directional-light>\n</ngt-canvas>\n\n\x3c!-- \ud83d\udc47 monitor the FPS --\x3e\n<ngt-stats></ngt-stats>\n'))),(0,r.kt)(l.Z,{value:"physicsTs",label:"physic-boxes.component.ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { NgtCanvas } from '@angular-three/core';\nimport { NgtStats } from '@angular-three/core/stats';\nimport { NgtAmbientLight, NgtDirectionalLight } from '@angular-three/core/lights';\nimport { NgtColorAttribute, NgtVector2Attribute } from '@angular-three/core/attributes';\n\n@Component({\n  selector: 'physic-boxes',\n  standalone: true,\n  templateUrl: 'physic-boxes.component.html',\n  imports: [NgtCanvas, NgtAmbientLight, NgtDirectionalLight, NgtStats, NgtColorAttribute, NgtVector2Attribute],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PhysicBoxesComponent {}\n")))),(0,r.kt)("h2",{id:"add-physics-container"},"Add Physics container"),(0,r.kt)("p",null,"All objects that are participating in the Physic World need to be rendered inside of ",(0,r.kt)("inlineCode",{parentName:"p"},"<ngt-physics>")," component. Let's update our ",(0,r.kt)("inlineCode",{parentName:"p"},"physic-boxes.component.html")," to render that"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"physicsHtml",label:"physic-boxes.component.html",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-canvas shadows [dpr]="[1, 2]" [gl]="{ alpha: false }" [camera]="{ position: [-1, 5, 5], fov: 45 }">\n  <ngt-color attach="background" color="lightblue"></ngt-color>\n\n  <ngt-ambient-light></ngt-ambient-light>\n  <ngt-directional-light [position]="10" castShadow>\n    <ngt-vector2 [attach]="[\'shadow\', \'mapSize\']" [vector2]="2048"></ngt-vector2>\n  </ngt-directional-light>\n\n  // highlight-start\n  <ngt-physics>\n    \x3c!-- our objects will go in here --\x3e\n  </ngt-physics>\n  // highlight-end\n</ngt-canvas>\n\n<ngt-stats></ngt-stats>\n'))),(0,r.kt)(l.Z,{value:"physicsTs",label:"physic-boxes.component.ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"/* ... */\n// highlight-start\nimport { NgtPhysics } from '@angular-three/cannon';\n// highlight-end\n\n@Component({\n  /* ... */\n  standalone: true,\n  imports: [\n    /* ... */\n    // highlight-start\n    NgtPhysics,\n    // highlight-end\n  ],\n})\nexport class PhysicBoxesComponent {}\n")))),(0,r.kt)("h2",{id:"add-a-floor"},"Add a floor"),(0,r.kt)("p",null,'Next, we\'ll add our "floor". A floor is usually a ',(0,r.kt)("inlineCode",{parentName:"p"},"THREE.Mesh")," with a ",(0,r.kt)("inlineCode",{parentName:"p"},"THREE.PlaneGeometry")),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"floorHtml",label:"floor.component.html",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-mesh receiveShadow [ref]="planeRef.ref" [position]="position" [rotation]="rotation">\n  <ngt-plane-geometry [args]="[1000, 1000]"></ngt-plane-geometry>\n  <ngt-shadow-material color="#171717" transparent opacity="0.4"></ngt-shadow-material>\n</ngt-mesh>\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We have a ",(0,r.kt)("inlineCode",{parentName:"li"},"ngt-mesh")," that can receive shadow with ",(0,r.kt)("inlineCode",{parentName:"li"},"receiveShadow")),(0,r.kt)("li",{parentName:"ul"},"We attach a ",(0,r.kt)("inlineCode",{parentName:"li"},"ngt-plane-geometry")," with 1000 width and height and a transparent ",(0,r.kt)("inlineCode",{parentName:"li"},"ngt-shadow-material")," to this ",(0,r.kt)("inlineCode",{parentName:"li"},"ngt-mesh")),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"planeRef")," is created externally by ",(0,r.kt)("inlineCode",{parentName:"li"},"NgtPhysicBody")," and passed into the ",(0,r.kt)("inlineCode",{parentName:"li"},"ngt-mesh"),". Remember how an ",(0,r.kt)("a",{parentName:"li",href:"../core/instance"},(0,r.kt)("inlineCode",{parentName:"a"},"NgtInstance"))," works?"))),(0,r.kt)(l.Z,{value:"floorTs",label:"floor.component.ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@Component({\n  selector: 'physic-floor',\n  standalone: true,\n  templateUrl: 'floor.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  imports: [NgtMesh, NgtPlaneGeometry, NgtShadowMaterial],\n  // \ud83d\udc47 we provide NgtPhysicBody for this Floor\n  providers: [NgtPhysicBody],\n})\nexport class PhysicFloorComponent {\n  @Input() position?: NgtTriple;\n  rotation = [-Math.PI / 2, 0, 0] as NgtTriple;\n\n  // \ud83d\udc47 create a ref with the Body API\n  // \ud83d\udc47                        \ud83d\udc47 we are working with a PlaneGeometry\n  planeRef = this.physicBody.usePlane(() => ({\n    //      \ud83d\udc47 we provide the same args to usePlane as we do on the ngt-plane-geometry\n    args: [1000, 1000],\n    //      \ud83d\udc47 same for the initial position and rotation\n    rotation: this.rotation,\n    position: this.position,\n  }));\n\n  //                      \ud83d\udc47 inject the provided NgtPhysicBody to have access to the Body API\n  constructor(private physicBody: NgtPhysicBody) {}\n}\n"))),(0,r.kt)(l.Z,{value:"physicsTs",label:"physic-boxes.component.ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"/* ... */\n// highlight-start\nimport { PhysicFloorComponent } from './floor.component';\n// highlight-end\n\n@Component({\n  /* ... */\n  standalone: true,\n  imports: [\n    /* ... */\n    // highlight-start\n    PhysicFloorComponent,\n    // highlight-end\n  ],\n})\nexport class PhysicBoxesComponent {}\n"))),(0,r.kt)(l.Z,{value:"physicsHtml",label:"physic-boxes.component.html",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-canvas shadows [dpr]="[1, 2]" [gl]="{ alpha: false }" [camera]="{ position: [-1, 5, 5], fov: 45 }">\n  <ngt-color attach="background" color="lightblue"></ngt-color>\n\n  <ngt-ambient-light></ngt-ambient-light>\n  <ngt-directional-light [position]="10" castShadow>\n    <ngt-vector2 [attach]="[\'shadow\', \'mapSize\']" [vector2]="2048"></ngt-vector2>\n  </ngt-directional-light>\n\n  <ngt-physics>\n    // highlight-start\n    <physic-floor [position]="[0, -2.5, 0]"></physic-floor>\n    // highlight-end\n  </ngt-physics>\n</ngt-canvas>\n\n<ngt-stats></ngt-stats>\n')))),(0,r.kt)("h2",{id:"add-a-box"},"Add a box"),(0,r.kt)("p",null,"Now that we have a floor, we can ",(0,r.kt)("em",{parentName:"p"},"drop")," things on it. In this case, the thing is going to be a Box"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"boxHtml",label:"box.component.html",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-mesh receiveShadow castShadow [ref]="boxRef.ref" [position]="position" [rotation]="rotation">\n  <ngt-box-geometry></ngt-box-geometry>\n  <ngt-mesh-lambert-material color="tomato"></ngt-mesh-lambert-material>\n</ngt-mesh>\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Similar to the ",(0,r.kt)("inlineCode",{parentName:"li"},"Floor"),", we create a ",(0,r.kt)("inlineCode",{parentName:"li"},"ngt-mesh")," that can receive shadow (",(0,r.kt)("inlineCode",{parentName:"li"},"receiveShadow"),") AND can cast shadow (",(0,r.kt)("inlineCode",{parentName:"li"},"castShadow"),")"),(0,r.kt)("li",{parentName:"ul"},"We're using ",(0,r.kt)("inlineCode",{parentName:"li"},"ngt-box-geometry")," to represent a box"),(0,r.kt)("li",{parentName:"ul"},"We're using a material (",(0,r.kt)("inlineCode",{parentName:"li"},"ngt-mesh-lambert-material"),") that can react to lights and create shadows"),(0,r.kt)("li",{parentName:"ul"},"We use ",(0,r.kt)("inlineCode",{parentName:"li"},"boxRef")," that is created by ",(0,r.kt)("inlineCode",{parentName:"li"},"NgtPhysicBody")," the same way we used ",(0,r.kt)("inlineCode",{parentName:"li"},"planeRef")))),(0,r.kt)(l.Z,{value:"boxTs",label:"box.component.ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@Component({\n  selector: 'physic-box',\n  standalone: true,\n  templateUrl: 'box.component.html',\n  imports: [NgtMesh, NgtBoxGeometry, NgtMeshLambertMaterial],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // \ud83d\udc47 provide the Physic Body API\n  providers: [NgtPhysicBody],\n})\nexport class PhysicBoxComponent {\n  @Input() position?: NgtTriple;\n  rotation = [0.4, 0.2, 0.5] as NgtTriple;\n\n  // \ud83d\udc47 create a Box ref by the Physic Body API\n  // \ud83d\udc47                        \ud83d\udc47 we're working with ngt-box-geometry so we're utilizing useBox\n  boxRef = this.physicBody.useBox(() => ({\n    mass: 1,\n    position: this.position,\n    rotation: this.rotation,\n  }));\n\n  //                      \ud83d\udc47 inject the Physic Body API\n  constructor(private physicBody: NgtPhysicBody) {}\n}\n"))),(0,r.kt)(l.Z,{value:"physicsTs",label:"physic-boxes.component.ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"/* ... */\n// highlight-start\nimport { PhysicBoxComponent } from './box.component';\n// highlight-end\n\n@Component({\n  /* ... */,\n  standalone: true,\n  imports: [\n    /* ... */\n    PhysicFloorComponent,\n    // highlight-start\n    PhysicBoxComponent,\n    // highlight-end\n  ]\n})\nexport class PhysicBoxesComponent {}\n"))),(0,r.kt)(l.Z,{value:"physicsHtml",label:"physic-boxes.component.html",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<ngt-canvas shadows [dpr]="[1, 2]" [gl]="{ alpha: false }" [camera]="{ position: [-1, 5, 5], fov: 45 }">\n  <ngt-color attach="background" color="lightblue"></ngt-color>\n\n  <ngt-ambient-light></ngt-ambient-light>\n  <ngt-directional-light [position]="10" castShadow>\n    <ngt-vector2 [attach]="[\'shadow\', \'mapSize\']" [vector2]="2048"></ngt-vector2>\n  </ngt-directional-light>\n\n  <ngt-physics>\n    <physic-floor [position]="[0, -2.5, 0]"></physic-floor>\n    // highlight-start\n    <physic-box [position]="[0.1, 5, 0]"></physic-box>\n    // highlight-end\n  </ngt-physics>\n</ngt-canvas>\n\n<ngt-stats></ngt-stats>\n')))),(0,r.kt)("p",null,"Stop here and we'll have a single box dropping on the floor. Fun, right?!"),(0,r.kt)("iframe",{class:"code-demo",src:"https://codesandbox.io/embed/simple-physic-cubes-single-cube-v4jbrl?fontsize=14&hidenavigation=1&theme=dark&view=preview",title:"simple-physic-cubes-single-cube",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),(0,r.kt)("p",null,"All that's left to do is to render more ",(0,r.kt)("inlineCode",{parentName:"p"},"physic-box")," \ud83d\ude04. Play with the ",(0,r.kt)("inlineCode",{parentName:"p"},"[position]")," to your heart content"),(0,r.kt)("h2",{id:"exercise"},"Exercise"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Try different colors and shapes"),(0,r.kt)("li",{parentName:"ul"},"Try different physic parameters (eg: mass)")))}g.isMDXComponent=!0}}]);