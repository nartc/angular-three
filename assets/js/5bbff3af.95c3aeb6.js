"use strict";(self.webpackChunklibs_documentations=self.webpackChunklibs_documentations||[]).push([[600],{9613:function(t,n,e){e.d(n,{Zo:function(){return p},kt:function(){return m}});var r=e(9496);function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function o(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function i(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?o(Object(e),!0).forEach((function(n){a(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function l(t,n){if(null==t)return{};var e,r,a=function(t,n){if(null==t)return{};var e,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||(a[e]=t[e]);return a}(t,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(a[e]=t[e])}return a}var s=r.createContext({}),c=function(t){var n=r.useContext(s),e=n;return t&&(e="function"==typeof t?t(n):i(i({},n),t)),e},p=function(t){var n=c(t.components);return r.createElement(s.Provider,{value:n},t.children)},u={inlineCode:"code",wrapper:function(t){var n=t.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(t,n){var e=t.components,a=t.mdxType,o=t.originalType,s=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),d=c(e),m=a,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return e?r.createElement(g,i(i({ref:n},p),{},{components:e})):r.createElement(g,i({ref:n},p))}));function m(t,n){var e=arguments,a=n&&n.mdxType;if("string"==typeof t||a){var o=e.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=t,l.mdxType="string"==typeof t?t:a,i[1]=l;for(var c=2;c<o;c++)i[c]=e[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,e)}d.displayName="MDXCreateElement"},51:function(t,n,e){e.r(n),e.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=e(2081),a=e(4604),o=(e(9496),e(9613)),i=["components"],l={id:"constraint",title:"Constraint",sidebar_label:"Constraint"},s=void 0,c={unversionedId:"cannon/constraint",id:"cannon/constraint",title:"Constraint",description:"To interact with Cannon Constraint API, we use NgtPhysicConstraint service from @angular-three/cannon",source:"@site/docs/cannon/constraint.mdx",sourceDirName:"cannon",slug:"/cannon/constraint",permalink:"/docs/cannon/constraint",draft:!1,editUrl:"https://github.com/nartc/angular-three/tree/main/libs/documentations/docs/docs/cannon/constraint.mdx",tags:[],version:"current",frontMatter:{id:"constraint",title:"Constraint",sidebar_label:"Constraint"},sidebar:"docs",previous:{title:"Body",permalink:"/docs/cannon/body"},next:{title:"Spring",permalink:"/docs/cannon/spring"}},p={},u=[{value:"Usage",id:"usage",level:2},{value:"Constraint Creators",id:"constraint-creators",level:2}],d={toc:u};function m(t){var n=t.components,e=(0,a.Z)(t,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,e,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To interact with ",(0,o.kt)("a",{parentName:"p",href:"https://pmndrs.github.io/cannon-es/docs/classes/Constraint.html"},"Cannon Constraint API"),", we use ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtPhysicConstraint")," service from ",(0,o.kt)("inlineCode",{parentName:"p"},"@angular-three/cannon")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Component({\n  providers: [NgtPhysicConstraint],\n})\nexport class BoxComponent implements OnInit {\n  constructor(private physicConstraint: NgtPhysicConstraint) {}\n\n  ngOnInit() {\n    // \ud83d\udc47 creating a Constraint between the two bodies\n    this.physicConstraint.usePointToPointConstraint(refA, refB, someOptions);\n  }\n}\n")),(0,o.kt)("h2",{id:"constraint-creators"},"Constraint Creators"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"name"),(0,o.kt)("th",{parentName:"tr",align:null},"type"),(0,o.kt)("th",{parentName:"tr",align:null},"options"),(0,o.kt)("th",{parentName:"tr",align:null},"description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"usePointToPointConstraint"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"'PointToPoint'")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"PointToPointConstraintOpts")),(0,o.kt)("td",{parentName:"tr",align:null},"Connects two bodies at given offset points.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"useConeTwistConstraint"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"'ConeTwist'")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"ConeTwistConstraintOpts")),(0,o.kt)("td",{parentName:"tr",align:null},"A Cone Twist constraint, useful for ragdolls.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"useDistanceConstraint"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"'Distance'")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"DistanceConstraintOpts")),(0,o.kt)("td",{parentName:"tr",align:null},"Constrains two bodies to be at a constant distance from each others center of mass.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"useHingeConstraint"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"'Hinge'")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"HingeConstraintOpts")),(0,o.kt)("td",{parentName:"tr",align:null},"Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"useLockConstraint"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"'Lock'")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"LockConstraintOpts")),(0,o.kt)("td",{parentName:"tr",align:null},"Lock constraint. Will remove all degrees of freedom between the bodies.")))),(0,o.kt)("p",null,"All Constraint Creators return ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtPhysicConstraintReturn")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export interface NgtPhysicConstraintReturn<T extends 'Hinge' | ConstraintTypes> {\n  bodyA: Ref<THREE.Object3D>;\n  bodyB: Ref<THREE.Object3D>;\n  api: NgtConstraintORHingeApi<T>;\n}\n")))}m.isMDXComponent=!0}}]);