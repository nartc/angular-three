"use strict";(self.webpackChunklibs_documentations=self.webpackChunklibs_documentations||[]).push([[374],{9613:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),l=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return n?o.createElement(h,i(i({ref:t},c),{},{components:n})):o.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1308:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var o=n(2081),r=n(4604),a=(n(9496),n(9613)),i=["components"],s={id:"component-store",title:"ComponentStore",sidebar_label:"ComponentStore"},p=void 0,l={unversionedId:"core/component-store",id:"core/component-store",title:"ComponentStore",description:"NgtComponentStore is a modified version of NgRx Component Store.",source:"@site/docs/core/component-store.mdx",sourceDirName:"core",slug:"/core/component-store",permalink:"/docs/core/component-store",draft:!1,editUrl:"https://github.com/nartc/angular-three/tree/main/libs/documentations/docs/docs/core/component-store.mdx",tags:[],version:"current",frontMatter:{id:"component-store",title:"ComponentStore",sidebar_label:"ComponentStore"},sidebar:"docs",previous:{title:"Ref",permalink:"/docs/core/ref"},next:{title:"Instance",permalink:"/docs/core/instance"}},c={},d=[{value:"Usage",id:"usage",level:2},{value:"Setting up",id:"setting-up",level:3},{value:"Handling side-effects",id:"handling-side-effects",level:3},{value:"What are side-effects?",id:"what-are-side-effects",level:4},{value:"Usage",id:"usage-1",level:4},{value:"Effect with parameters",id:"effect-with-parameters",level:4},{value:"Managing component state",id:"managing-component-state",level:3},{value:"API",id:"api",level:2},{value:"<code>select()</code>",id:"select",level:3},{value:"<code>get()</code>",id:"get",level:3},{value:"<code>tapEffect()</code>",id:"tapeffect",level:3},{value:"<code>startWithUndefined()</code>",id:"startwithundefined",level:3}],u={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"NgtComponentStore")," is a modified version of ",(0,a.kt)("a",{parentName:"p",href:"https://ngrx.io/guide/component-store"},"NgRx Component Store"),"."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("h3",{id:"setting-up"},"Setting up"),(0,a.kt)("p",null,"There are two approaches to set up ",(0,a.kt)("inlineCode",{parentName:"p"},"NgtComponentStore")," in our custom component. First approach is to extend ",(0,a.kt)("inlineCode",{parentName:"p"},"NgtComponentStore"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@Component({\n  /* ... */\n})\nexport class CubeComponent extends NgtComponentStore {}\n")),(0,a.kt)("p",null,"Second approach is to provide ",(0,a.kt)("inlineCode",{parentName:"p"},"NgtComponentStore"),". This approach helps when our component needs to extend some other base class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@Component({\n    /* ... */,\n    providers: [NgtComponentStore]\n})\nexport class CubeComponent extends SomeBaseClass {\n  constructor(private componentStore: NgtComponentStore) {\n    super();\n  }\n}\n")),(0,a.kt)("h3",{id:"handling-side-effects"},"Handling side-effects"),(0,a.kt)("h4",{id:"what-are-side-effects"},"What are side-effects?"),(0,a.kt)("p",null,"In NGT, side-effects can be various things:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Fetching an assets (models, textures etc...)"),(0,a.kt)("li",{parentName:"ul"},"Watching for changes (can be Inputs changes, size changes etc...)"),(0,a.kt)("li",{parentName:"ul"},"Registering a callback to the Animation Loop")),(0,a.kt)("p",null,"Usually in Angular, these effects come in forms of ",(0,a.kt)("a",{parentName:"p",href:"https://rxjs.dev/api/index/class/Observable"},"RxJS Observable"),' and to "handle" the effects, we would need to call ',(0,a.kt)("inlineCode",{parentName:"p"},".subscribe()"),' on the Observable. This is not a wrong thing to do but more than often in NGT, we would also need to "reset", "dispose", or "clean up" the effects that we handle. For example:'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Registering a callback to the animation loop: we would need to ",(0,a.kt)("strong",{parentName:"li"},"unregister")," the callback when the component's destroyed"),(0,a.kt)("li",{parentName:"ul"},"Watching for changes of Inputs: setting options on some Object3D then we might need to reset the options on changes/destroyed"),(0,a.kt)("li",{parentName:"ul"},"Setting up event listeners: we would need to remove the listeners etc...")),(0,a.kt)("p",null,"Using ",(0,a.kt)("inlineCode",{parentName:"p"},".subscribe()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Subscription")," would yield more boilerplate code that needed. This is where ",(0,a.kt)("inlineCode",{parentName:"p"},"NgtComponentStore#effect")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"tapEffect"),"come into play"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"effect()"),": accepts a raw value or a stream (",(0,a.kt)("inlineCode",{parentName:"li"},"Observable"),") and subscribe to the stream automatically. ",(0,a.kt)("inlineCode",{parentName:"li"},"effect()")," will also unsubscribe from the ",(0,a.kt)("inlineCode",{parentName:"li"},"Observable")," on component's destroyed"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tapEffect()"),": is a custom Operator that would ",(0,a.kt)("strong",{parentName:"li"},"act")," on new data emission AND ",(0,a.kt)("strong",{parentName:"li"},"clean up")," before new data emission comes in.")),(0,a.kt)("h4",{id:"usage-1"},"Usage"),(0,a.kt)("p",null,"By just using ",(0,a.kt)("inlineCode",{parentName:"p"},"NgtComponentStore")," without providing any type (",(0,a.kt)("inlineCode",{parentName:"p"},"NgtComponentStore<SomeInterface>"),"), our ",(0,a.kt)("inlineCode",{parentName:"p"},"NgtComponentStore")," does not hold any state. However, that does not mean that it cannot serve any purpose."),(0,a.kt)("p",null,"If we just want to handle side-effects without manual subscription (eg: ",(0,a.kt)("inlineCode",{parentName:"p"},".subscribe()"),"), then ",(0,a.kt)("inlineCode",{parentName:"p"},"NgtComponentStore")," is enough."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@Component({\n  /* ... */\n})\nexport class CubeComponent extends NgtComponentStore implements OnInit {\n  constructor(private store: NgtStore) {\n    super();\n  }\n\n  ngOnInit() {\n    // this.effect() returns a callable function.\n    this.effect<void>(\n      // \ud83d\udc47 can use any RxJS operator here.\n      tapEffect(() => {\n        // handle some side effect. For example, registering some before render callback\n        const unregister = this.store.registerBeforeRender({\n          /* ... */\n        });\n\n        // \ud83d\udc47 clean up the effect\n        return () => {\n          unregister();\n        };\n      })\n    )(); // \ud83d\udc48 don't forget to call the effect\n\n    // \ud83d\udc47 call the effect like any other function\n    this.registerBeforeRender();\n  }\n\n  // we can also make it a function for readability\n  private readonly registerBeforeRender = this.effect<void>(\n    tapEffect(() => {\n      // handle some side effect. For example, registering some before render callback\n      const unregister = this.store.registerBeforeRender({\n        /* ... */\n      });\n\n      // \ud83d\udc47 clean up the effect\n      return () => {\n        unregister();\n      };\n    })\n  );\n}\n")),(0,a.kt)("h4",{id:"effect-with-parameters"},"Effect with parameters"),(0,a.kt)("p",null,"Effects can also be triggered by some parameters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@Component({\n  /* ... */\n})\nexport class CubeComponent extends NgtComponentStore {\n  constructor(private store: NgtStore) {\n    super();\n  }\n\n  ngOnInit() {\n    //                        \ud83d\udc47 reacts to size changes\n    const size$ = this.store.select((s) => s.size);\n\n    //                \ud83d\udc47 Effect reacting to size$.\n    this.reactToSize(size$);\n    this.reactToSizeTwo(size$);\n  }\n\n  private readonly reactToSize = this.effect<NgtSize>(\n    tapEffect((size) => {\n      //      \ud83d\udc46 we can have the Effect uses the Parameters\n      const { width, height } = size;\n      // do something with width, height\n\n      return () => {\n        // clean up as needed.\n        // This clean up function runs AFTER each time NgtSize changes and one FINAL time before the Component is destroyed\n      };\n    })\n  );\n\n  private readonly reactToSizeTwo = this.effect(\n    tapEffect(() => {\n      //                                  \ud83d\udc47 or we can read it imperatively from the Source\n      const { width, height } = this.store.get((s) => s.size);\n      // do something with width, height\n\n      return () => {\n        // clean up as needed.\n      };\n    })\n  );\n}\n")),(0,a.kt)("h3",{id:"managing-component-state"},"Managing component state"),(0,a.kt)("p",null,"We can tell ",(0,a.kt)("inlineCode",{parentName:"p"},"NgtComponentStore")," what states we want it to manage by giving it an interface"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface CubeState {\n  prop1: string;\n  prop2: number;\n  prop3?: boolean;\n  prop4: Date;\n}\n\n@Component({\n  /*...*/\n})\nexport class CubeComponent extends NgtComponentStore<CubeState> {\n  @Input() set prop1(prop1: string) {\n    // we can have Setter Input to bring the Input in our State\n    // This way, we can manage this Input reactively\n    this.set({ prop1 });\n  }\n\n  constructor() {\n    super();\n    this.set({\n      prop1: '',\n      prop2: 0,\n      // we skip prop3 before it's optional\n      // we skip prop4 on purpose\n    });\n  }\n\n  ngOnInit() {\n    this.get(); // returns { prop1: '', prop2: 0, prop3: undefined, prop4: undefined }\n    this.get((s) => s.prop1); // returns '';\n\n    this.select(); // Observable<CubeState>, subscribe to this yields { prop1: '', prop2: 0, prop3: undefined, prop4: undefined } at first\n\n    this.select((s) => s.prop1); // Observable<string>, subscribe to this yields '' at first\n\n    this.select((s) => s.prop3); // Observable<boolean | undefined>, subscribe to this yields nothing until we set prop3 the first time\n    this.select((s) => s.prop4); // Observable<Date>, subscribe to this yields nothing until we set prop4 the first time\n\n    this.select((s) => s.prop3).pipe(startWithUndefined()); // Observable<boolean | undefined>, subscribe to this yields \"undefined\" at first\n\n    this.select(\n      this.select((s) => s.prop1),\n      this.select((s) => s.prop2),\n      (prop1, prop2) => ({ prop1, prop2 }) // optional projectorFn\n    ); // Observable<{prop1: string, prop2: number}>, subscribe to this yields { prop1: '', prop2: 0 }\n\n    this.select(\n      this.select((s) => s.prop1),\n      this.select((s) => s.prop3), // or prop4, or any prop that hasn't been initialized with a default value\n      (prop1, prop3) => ({ prop1, prop3 })\n    ); // Observable<{prop1: string, prop3: boolean | undefined}>, subscribe to this yields nothing until we set prop3 the first time\n  }\n\n  //        \ud83d\udc47 we can also create reusable selectors\n  readonly prop1$ = this.select((s) => s.prop1);\n  readonly prop1And2$ = this.select(\n    this.prop1$,\n    this.select((s) => s.prop2)\n  );\n}\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"https://github.com/nartc/angular-three/blob/v5/libs/postprocessing/src/lib/effect-composer.ts"},"NGT EffectComposer")," is a good example of using ",(0,a.kt)("inlineCode",{parentName:"p"},"NgtComponentStore"))),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"NgtEffectComposer")," extends ",(0,a.kt)("a",{parentName:"p",href:"./instance"},(0,a.kt)("inlineCode",{parentName:"a"},"NgtInstance"))," and ",(0,a.kt)("inlineCode",{parentName:"p"},"NgtInstance")," extends ",(0,a.kt)("inlineCode",{parentName:"p"},"NgtComponentStore")," so technically, ",(0,a.kt)("inlineCode",{parentName:"p"},"NgtEffectComposer")," also extends ",(0,a.kt)("inlineCode",{parentName:"p"},"NgtComponentStore"))),(0,a.kt)("h2",{id:"api"},"API"),(0,a.kt)("p",null,"The API is almost identical to ",(0,a.kt)("inlineCode",{parentName:"p"},"@ngrx/component-store")," with the following differences:"),(0,a.kt)("h3",{id:"select"},(0,a.kt)("inlineCode",{parentName:"h3"},"select()")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"this.select()")," does not emit for ",(0,a.kt)("inlineCode",{parentName:"li"},"undefined")," values. This allows for the ",(0,a.kt)("inlineCode",{parentName:"li"},"NgtComponentStore")," to be initialized with a ",(0,a.kt)("inlineCode",{parentName:"li"},"Partial<State>")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"this.select()")," with multiple selectors has a default ",(0,a.kt)("inlineCode",{parentName:"li"},"projectorFn")," that is ",(0,a.kt)("inlineCode",{parentName:"li"},"() => ({})"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.select(\n  this.select((s) => s.prop1),\n  this.select((s) => s.prop2),\n  this.select((s) => s.prop3)\n); // this is allowed\n\n// it is equivalent to\nthis.select(\n  this.select((s) => s.prop1),\n  this.select((s) => s.prop2),\n  this.select((s) => s.prop3),\n  () => ({}) // empty object\n);\n")),(0,a.kt)("h3",{id:"get"},(0,a.kt)("inlineCode",{parentName:"h3"},"get()")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"this.get()")," is a ",(0,a.kt)("inlineCode",{parentName:"p"},"public")," method instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"protected"),". This is because THREE.js is an imperative library. ",(0,a.kt)("inlineCode",{parentName:"p"},"get()")," allows the objects to expose state in an imperative way (eg: in animation loop)"),(0,a.kt)("h3",{id:"tapeffect"},(0,a.kt)("inlineCode",{parentName:"h3"},"tapEffect()")),(0,a.kt)("p",null,"Similar to ",(0,a.kt)("a",{parentName:"p",href:"https://rxjs.dev/api/operators/tap"},"RxJs tap operator")," but ",(0,a.kt)("inlineCode",{parentName:"p"},"tapEffect()")," runs a clean up function (if provided) everytime the Source emits and the last time when the Source completes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export class CubeComponent extends NgtComponentStore {\n  ngOnInit() {\n    this.runOnceAndCleanUpOnDestroy();\n\n    const every5Sec$ = timer(0, 5000);\n    this.runAndCleanUpEveryChanges(every5Sec$);\n  }\n\n  private readonly runOnceAndCleanUpOnDestroy = this.effect<void>(\n    tapEffect(() => {\n      const intervalSub = interval(1000).subscribe((tick) => {\n        console.log('Log every 1s: ' + tick);\n      });\n\n      return () => {\n        intervalSub.unsubscribe();\n      };\n    })\n  );\n\n  private readonly runAndCleanUpEveryChanges = this.effect<number>(\n    tapEffect(() => {\n      const intervalSub = interval(1000).subscribe((tick) => {\n        console.log('Log every 1s: ' + tick);\n      });\n\n      return () => {\n        intervalSub.unsubscribe();\n      };\n    })\n  );\n}\n")),(0,a.kt)("h3",{id:"startwithundefined"},(0,a.kt)("inlineCode",{parentName:"h3"},"startWithUndefined()")),(0,a.kt)("p",null,"Shortcut for ",(0,a.kt)("a",{parentName:"p",href:"https://rxjs.dev/api/operators/startWith"},"RxJs startWith operator")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," value. This is useful for states that do not have initialized values but still need to participate in the stream with ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," values at first."))}m.isMDXComponent=!0}}]);