"use strict";(self.webpackChunklibs_documentations=self.webpackChunklibs_documentations||[]).push([[685],{9613:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5923:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r=n(2081),a=n(4604),i=(n(9496),n(9613)),o=["components"],s={id:"store",title:"Store",sidebar_label:"Store"},l=void 0,c={unversionedId:"core/store",id:"core/store",title:"Store",description:"NGT state is tracked by a single NgtStore. Each NgtCanvas instance contains its own instance of NgtStore so each scene graph has its independent state.",source:"@site/docs/core/store.mdx",sourceDirName:"core",slug:"/core/store",permalink:"/docs/core/store",draft:!1,editUrl:"https://github.com/nartc/angular-three/tree/main/libs/documentations/docs/docs/core/store.mdx",tags:[],version:"current",frontMatter:{id:"store",title:"Store",sidebar_label:"Store"},sidebar:"docs",previous:{title:"Objects",permalink:"/docs/core/objects"},next:{title:"Services",permalink:"/docs/core/services"}},p={},d=[{value:"Accessing states",id:"accessing-states",level:2},{value:"Reactive",id:"reactive",level:3},{value:"Imperative",id:"imperative",level:3},{value:"Registering before render callbacks",id:"registering-before-render-callbacks",level:2},{value:"<code>NgtBeforeRenderRecord</code>",id:"ngtbeforerenderrecord",level:3},{value:"Render Priority",id:"render-priority",level:3},{value:"Negative Priority",id:"negative-priority",level:3}],u={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"NGT state is tracked by a single ",(0,i.kt)("inlineCode",{parentName:"p"},"NgtStore"),". Each ",(0,i.kt)("inlineCode",{parentName:"p"},"NgtCanvas")," instance contains its own instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"NgtStore")," so each scene graph has its independent state."),(0,i.kt)("p",null,"All ",(0,i.kt)("inlineCode",{parentName:"p"},"NgtInstance")," injects ",(0,i.kt)("inlineCode",{parentName:"p"},"NgtStore")," so all NGT objects essentially have access to the Canvas state object. Any custom components inside of ",(0,i.kt)("inlineCode",{parentName:"p"},"<ngt-canvas>")," can also inject ",(0,i.kt)("inlineCode",{parentName:"p"},"NgtStore")," and use its state."),(0,i.kt)("h2",{id:"accessing-states"},"Accessing states"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"NgtStore")," is a ",(0,i.kt)("a",{parentName:"p",href:"./component-store"},(0,i.kt)("inlineCode",{parentName:"a"},"NgtComponentStore"))," so there are both Reactive and Imperative approaches to access the state."),(0,i.kt)("h3",{id:"reactive"},"Reactive"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"this.store.select(); // reacts to the whole state object\nthis.store.select((s) => s.camera); // reacts to the top-level property\nthis.store.select((s) => s.events.enabled); // reacts to deep property\n")),(0,i.kt)("h3",{id:"imperative"},"Imperative"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"this.store.get(); // gets the whole state at the time of invoking\nthis.store.get((s) => s.camera); // gets the top-level property at the time of invoking\nthis.store.get((s) => s.events.enabled); // gets the deep property at the time of invoking\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"select()")," is mainly used as parameters to side-effects. When something changes, we want to re-run the side-effects"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"get()")," is usually used in animation loop callback where the state gets the latest value per frame"))),(0,i.kt)("h2",{id:"registering-before-render-callbacks"},"Registering before render callbacks"),(0,i.kt)("p",null,"We can use ",(0,i.kt)("inlineCode",{parentName:"p"},"NgtStore")," to register callbacks to be run before every renders (aka the animation) by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"registerBeforeRender()")," on the ",(0,i.kt)("inlineCode",{parentName:"p"},"NgtStore")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export class CubeComponent extends NgtInstance {\n  ngOnInit() {\n    // \ud83d\udc47 this is available on all NgtInstance\n    const unregister = this.store.registerBeforeRender(/* NgtBeforeRenderRecord */);\n    // this returns the clean up function. call unregister() to unsubscribe from the animation loop, preventing memory leak\n  }\n}\n")),(0,i.kt)("h3",{id:"ngtbeforerenderrecord"},(0,i.kt)("inlineCode",{parentName:"h3"},"NgtBeforeRenderRecord")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"registerBeforeRender()")," accepts an object in the shape of ",(0,i.kt)("inlineCode",{parentName:"p"},"NgtBeforeRenderRecord")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"callback"),": the only required property. This is the callback that would be called before every render, outside of Angular Zone. ",(0,i.kt)("inlineCode",{parentName:"li"},"callback")," is called with the same arguments as ",(0,i.kt)("a",{parentName:"li",href:"./objects#beforerender-output"},(0,i.kt)("inlineCode",{parentName:"a"},"(beforeRender)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"obj"),": optional ",(0,i.kt)("inlineCode",{parentName:"li"},"Ref<THREE.Object3D>")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"THREE.Object3D"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"priority"),": optional ",(0,i.kt)("a",{parentName:"li",href:"#render-priority"},"Render Priority"))),(0,i.kt)("h3",{id:"render-priority"},"Render Priority"),(0,i.kt)("p",null,"By default, NGT renders the scene automatically on every frame. If we need more control over the render-loop, we may pass in the ",(0,i.kt)("inlineCode",{parentName:"p"},"priority")," property on ",(0,i.kt)("strong",{parentName:"p"},"ANY")," ",(0,i.kt)("inlineCode",{parentName:"p"},"registerBeforeRender()")," and NGT will disable the automatic render altogether. It is our responsibility to render now, which is useful when we're working with things like ",(0,i.kt)("inlineCode",{parentName:"p"},"EffectComposer")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"this.store.registerBeforeRender({\n  callback: ({ gl, scene, camera }) => {\n    gl.render(scene, camera);\n  },\n  priority: 1,\n});\n\nthis.store.registerBeforeRender({\n  callback: ({ gl, scene, camera }) => {\n    // this executes AFTER the above callback\n    gl.render(/* ... */);\n  },\n  priority: 2,\n});\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"For registering before render callbacks with ",(0,i.kt)("inlineCode",{parentName:"p"},"(beforeRender)")," on the template, there is ",(0,i.kt)("a",{parentName:"p",href:"./objects#priority-input"},(0,i.kt)("inlineCode",{parentName:"a"},"[priority]")))),(0,i.kt)("h3",{id:"negative-priority"},"Negative Priority"),(0,i.kt)("p",null,"We can also pass in negative numerical value to ",(0,i.kt)("inlineCode",{parentName:"p"},"priority"),". Negative value will ",(0,i.kt)("strong",{parentName:"p"},"not")," stop the automatic render but is useful for ordering callbacks."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"this.store.registerBeforeRender({\n  callback: () => {\n    // this will be executed last\n  },\n  priority: -1,\n});\n\nthis.store.registerBeforeRender({\n  callback: () => {\n    // this will be executed AFTER the above callback\n  },\n  priority: -2,\n});\n")))}m.isMDXComponent=!0}}]);