"use strict";(self.webpackChunklibs_documentations=self.webpackChunklibs_documentations||[]).push([[942],{9613:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return g}});var a=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),m=l(n),g=i,u=m["".concat(s,".").concat(g)]||m[g]||c[g]||o;return n?a.createElement(u,r(r({ref:t},d),{},{components:n})):a.createElement(u,r({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,r[1]=p;for(var l=2;l<o;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2002:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return c}});var a=n(2081),i=n(4604),o=(n(9496),n(9613)),r=["components"],p={id:"migrate-to-v5",title:"Migrate to v5",sidebar_label:"Migrate to v5"},s=void 0,l={unversionedId:"getting-started/migrate-to-v5",id:"getting-started/migrate-to-v5",title:"Migrate to v5",description:"@angular-three/core@5 contains many breaking changes. This guide is to list all the breaking changes, removals, and deprecations in no particular order. Please give it a thorough read.",source:"@site/docs/getting-started/migrate-to-v5.mdx",sourceDirName:"getting-started",slug:"/getting-started/migrate-to-v5",permalink:"/docs/getting-started/migrate-to-v5",draft:!1,editUrl:"https://github.com/nartc/angular-three/tree/main/libs/documentations/docs/docs/getting-started/migrate-to-v5.mdx",tags:[],version:"current",frontMatter:{id:"migrate-to-v5",title:"Migrate to v5",sidebar_label:"Migrate to v5"},sidebar:"docs",previous:{title:"Migrate to v6",permalink:"/docs/getting-started/migrate-to-v6"},next:{title:"Our first scene",permalink:"/docs/first-scene"}},d={},c=[{value:"API Removals",id:"api-removals",level:2},{value:"<code>clock</code> Input",id:"clock-input",level:3},{value:"<code>size</code> Input",id:"size-input",level:3},{value:"<code>vr</code> Input",id:"vr-input",level:3},{value:"Controllers",id:"controllers",level:3},{value:"Physics Bodies",id:"physics-bodies",level:3},{value:"Physics Constraints",id:"physics-constraints",level:3},{value:"<code>exportAs</code>",id:"exportas",level:3},{value:"Instance getters",id:"instance-getters",level:3},{value:"Stores",id:"stores",level:3},{value:"<code>NgtAnimationFrameStore</code>",id:"ngtanimationframestore",level:4},{value:"<code>NgtPerformance</code>",id:"ngtperformance",level:3},{value:"<code>NgtLoop</code>",id:"ngtloop",level:3},{value:"<code>NgtDestroyed</code>",id:"ngtdestroyed",level:3},{value:"<code>NgtMathConstantPipe</code>",id:"ngtmathconstantpipe",level:3},{value:"API Deprecations",id:"api-deprecations",level:2},{value:"<code>NgtCoreModule</code>",id:"ngtcoremodule",level:3},{value:"<code>animateReady</code>",id:"animateready",level:3},{value:"<code>[parameters]</code> on Materials",id:"parameters-on-materials",level:3},{value:"<code>NgtColorPipe</code>",id:"ngtcolorpipe",level:3},{value:"<code>NgtFogPipe</code>",id:"ngtfogpipe",level:3},{value:"<code>NgtFogExp2Pipe</code>",id:"ngtfogexp2pipe",level:3},{value:"<code>NgtVector*Pipe</code>",id:"ngtvectorpipe",level:3},{value:"API Breaking Changes",id:"api-breaking-changes",level:2},{value:"<code>appendTo</code> and <code>appendMode</code>",id:"appendto-and-appendmode",level:3},{value:"<code>@angular-three/cannon</code> Worker API",id:"angular-threecannon-worker-api",level:3},{value:"<code>NgtPhysicBody</code>",id:"ngtphysicbody",level:3},{value:"<code>NgtPhysicConstraint</code>",id:"ngtphysicconstraint",level:3}],m={toc:c};function g(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@angular-three/core@5")," contains many breaking changes. This guide is to list all the breaking changes, removals, and deprecations in no particular order. Please give it a thorough read."),(0,o.kt)("h2",{id:"api-removals"},"API Removals"),(0,o.kt)("h3",{id:"clock-input"},(0,o.kt)("inlineCode",{parentName:"h3"},"clock")," Input"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<ngt-canvas [clock]>")," Input is removed."),(0,o.kt)("h3",{id:"size-input"},(0,o.kt)("inlineCode",{parentName:"h3"},"size")," Input"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<ngt-canvas [size]>")," Input is removed."),(0,o.kt)("h3",{id:"vr-input"},(0,o.kt)("inlineCode",{parentName:"h3"},"vr")," Input"),(0,o.kt)("p",null,"Previously, ",(0,o.kt)("inlineCode",{parentName:"p"},"[vr]")," Input on the ",(0,o.kt)("inlineCode",{parentName:"p"},"<ngt-canvas>")," was used to let NGT knows that a scene should be using WebXR. Now, NGT should automatically switch to use WebXR if a VR session is requested."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'- <ngt-canvas [vr]="true"></ngt-canvas>\n+ <ngt-canvas></ngt-canvas>\n')),(0,o.kt)("h3",{id:"controllers"},"Controllers"),(0,o.kt)("p",null,"All ",(0,o.kt)("inlineCode",{parentName:"p"},"controllers")," are removed as the core of Angular Three has been rewritten to use Abstractions with Dependency Injection instead. The Controller approach worked but the trade-off for DX was too big. (eg: auto importing modules is broken, hard to remember and extend etc...)"),(0,o.kt)("h3",{id:"physics-bodies"},"Physics Bodies"),(0,o.kt)("p",null,"All Physics Bodies directives are removed. Check ",(0,o.kt)("a",{parentName:"p",href:"#ngtphysicbody"},"NgtPhysicBody")," for more information on replacement."),(0,o.kt)("h3",{id:"physics-constraints"},"Physics Constraints"),(0,o.kt)("p",null,"All Physics Constraints directives are removed. Check ",(0,o.kt)("a",{parentName:"p",href:"#ngtphysicconstraint"},"NgtPhysicConstraint")," for more information on replacement."),(0,o.kt)("h3",{id:"exportas"},(0,o.kt)("inlineCode",{parentName:"h3"},"exportAs")),(0,o.kt)("p",null,"Previously, most objects in NGT were ",(0,o.kt)("inlineCode",{parentName:"p"},"Directive")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"exportAs")," was used to expose the Directive instances. Now, most objects are ",(0,o.kt)("inlineCode",{parentName:"p"},"Component")," instead as using ",(0,o.kt)("inlineCode",{parentName:"p"},"Directive")," didn't provide any additional benefit and ",(0,o.kt)("inlineCode",{parentName:"p"},"exportAs")," was unnecessary boilerplate."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'- <ngt-mesh #mesh="ngtMesh"></ngt-mesh>\n+ <ngt-mesh #mesh></ngt-mesh>\n')),(0,o.kt)("h3",{id:"instance-getters"},"Instance getters"),(0,o.kt)("p",null,"Previously, most NGT objects exposed a getter to get the instance for the corresponding type of object. For example:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"NgtCommonMesh")," exposes ",(0,o.kt)("inlineCode",{parentName:"li"},"get mesh()")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"NgtCommonMaterial")," exposes ",(0,o.kt)("inlineCode",{parentName:"li"},"get material()")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"NgtCommonGeometry")," exposes ",(0,o.kt)("inlineCode",{parentName:"li"},"get geometry()"))),(0,o.kt)("p",null,"Now, we can grab the ",(0,o.kt)("inlineCode",{parentName:"p"},"get instance()")," from ",(0,o.kt)("strong",{parentName:"p"},"ALL")," NGT objects instead. However, ",(0,o.kt)("inlineCode",{parentName:"p"},"instance")," returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"Ref"),". To get the underlying instance, use ",(0,o.kt)("inlineCode",{parentName:"p"},"instance.value")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"<ngt-plane-geometry #plane></ngt-plane-geometry> <ngt-mesh-standard-material #standard></ngt-mesh-standard-material>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'- <ngt-mesh [geometry]="plane.geometry" [material]="standard.material"></ngt-mesh>\n+ <ngt-mesh [geometry]="plane.instance" [material]="standard.instance"></ngt-mesh>\n+ \x3c!-- or, both works the same --\x3e\n+ <ngt-mesh [geometry]="plane.instance.value" [material]="standard.instance.value"></ngt-mesh>\n')),(0,o.kt)("h3",{id:"stores"},"Stores"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"NgtCanvasStore"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtAnimationFrameStore"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtEventsStore")," are removed in favor of a single ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtStore")," that tracks ",(0,o.kt)("strong",{parentName:"p"},"ALL")," states in the Canvas."),(0,o.kt)("h4",{id:"ngtanimationframestore"},(0,o.kt)("inlineCode",{parentName:"h4"},"NgtAnimationFrameStore")),(0,o.kt)("p",null,"Previously, ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtAnimationFrameStore#register")," (and ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtAnimationFrameStore#unregister"),") were used to register (and unregister) a callback to the animation loop. Now, ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtStore#registerBeforeRender")," (and ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtStore#unregisterBeforeRender"),") does that job."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"- const uuid = this.animationFrameStore.register({/* ... */});\n- this.animationFrameStore.unregister(uuid);\n+ const unregister = this.store.registerBeforeRender({/* ... */});\n+ unregister();\n")),(0,o.kt)("h3",{id:"ngtperformance"},(0,o.kt)("inlineCode",{parentName:"h3"},"NgtPerformance")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"NgtPerformance")," is removed. Performance related states and methods are now belonged to ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtStore"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"- this.performance.regress();\n+ const performance = this.store.get(s => s.performance);\n+ performance.regress();\n")),(0,o.kt)("h3",{id:"ngtloop"},(0,o.kt)("inlineCode",{parentName:"h3"},"NgtLoop")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"NgtLoop")," is removed. ",(0,o.kt)("inlineCode",{parentName:"p"},"invalidate()")," call is now belonged to ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtStore")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"- this.loop.invalidate();\n+ const invalidate = this.store.get(s => s.invalidate);\n+ invalidate();\n")),(0,o.kt)("h3",{id:"ngtdestroyed"},(0,o.kt)("inlineCode",{parentName:"h3"},"NgtDestroyed")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"NgtDestroyed")," is removed. All instances now expose ",(0,o.kt)("inlineCode",{parentName:"p"},"destroy$")," stream that can be used to be notified of when the underlying instance is ",(0,o.kt)("em",{parentName:"p"},"destroyed"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"@Directive({\n-   providers: [NgtDestroyed]\n})\nexport class SomeDirective {\n    constructor(\n        object: NgtObject,\n-       destroyed: NgtDestroyed\n    ) {\n        object.click.pipe(\n-           takeUntil(destroyed)\n+           takeUntil(object.destroy$)\n        )\n    }\n}\n")),(0,o.kt)("h3",{id:"ngtmathconstantpipe"},(0,o.kt)("inlineCode",{parentName:"h3"},"NgtMathConstantPipe")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"NgtMathConstantPipe")," is removed. If you are using ",(0,o.kt)("inlineCode",{parentName:"p"},"mathConst:'PI'"),", use ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtPiPipe")," instead."),(0,o.kt)("h2",{id:"api-deprecations"},"API Deprecations"),(0,o.kt)("h3",{id:"ngtcoremodule"},(0,o.kt)("inlineCode",{parentName:"h3"},"NgtCoreModule")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"NgtCoreModule")," has been deprecated in favor of ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtCanvasModule"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtCoreModule")," was confusing because it does not expose any other components/directives rather than ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtCanvas"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"- imports: [NgtCoreModule]\n+ imports: [NgtCanvasModule]\n")),(0,o.kt)("h3",{id:"animateready"},(0,o.kt)("inlineCode",{parentName:"h3"},"animateReady")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"(animateReady)")," has been deprecated in favor of ",(0,o.kt)("inlineCode",{parentName:"p"},"(beforeRender)"),". This is a rename to be consistent with THREE.js term."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'- <ngt-mesh (animateReady)="onAnimateReady($event)"></ngt-mesh>\n+ <ngt-mesh (beforeRender)="onAnimateReady($event)"></ngt-mesh>\n')),(0,o.kt)("h3",{id:"parameters-on-materials"},(0,o.kt)("inlineCode",{parentName:"h3"},"[parameters]")," on Materials"),(0,o.kt)("p",null,"Previously, any material directive accepted a ",(0,o.kt)("inlineCode",{parentName:"p"},"[parameters]")," Input to customize that material. Now, each material has their own set of Inputs that can be used instead."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'- <ngt-mesh-standard-material [parameters]="{ color: \'blue\' }"></ngt-mesh-standard-material>\n+ <ngt-mesh-standard-material color="blue"></ngt-mesh-standard-material>\n')),(0,o.kt)("h3",{id:"ngtcolorpipe"},(0,o.kt)("inlineCode",{parentName:"h3"},"NgtColorPipe")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"NgtColorPipe")," has been deprecated. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtColorAttribute")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"attach")," instead"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'- <ngt-canvas [scene]="{ background: \'blue\' | color }"></ngt-canvas>\n+ <ngt-canvas>\n+     <ngt-color attach="background" color="blue"></ngt-color>\n+ </ngt-canvas>\n')),(0,o.kt)("h3",{id:"ngtfogpipe"},(0,o.kt)("inlineCode",{parentName:"h3"},"NgtFogPipe")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"NgtFogPipe")," has been deprecated. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtFogAttribute")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"attach")," instead"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'- <ngt-canvas [scene]="{ fog: [] | fog }"></ngt-canvas>\n+ <ngt-canvas>\n+     <ngt-fog attach="fog" [fog]="[]"></ngt-fog>\n+ </ngt-canvas>\n')),(0,o.kt)("h3",{id:"ngtfogexp2pipe"},(0,o.kt)("inlineCode",{parentName:"h3"},"NgtFogExp2Pipe")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"NgtFogExp2Pipe")," has been deprecated. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtFogExp2Attribute")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"attach")," instead"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'- <ngt-canvas [scene]="{ fog: [] | fogExp2 }"></ngt-canvas>\n+ <ngt-canvas>\n+     <ngt-fog-exp2 attach="fog" [fogExp2]="[]"></ngt-fog>\n+ </ngt-canvas>\n')),(0,o.kt)("h3",{id:"ngtvectorpipe"},(0,o.kt)("inlineCode",{parentName:"h3"},"NgtVector*Pipe")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"NgtVector*Pipe")," has been deprecated. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtVector*Attribute")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"attach")," instead"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'- <ngt-directional-light [shadow]="{ mapSize: [2048, 2048] | vector2 }"></ngt-directional-light>\n+ <ngt-directional-light>\n+     <ngt-vector2 [attach]="[\'shadow\', \'mapSize\']" [vector2]="2048"></ngt-vector2>\n+ </ngt-directional-light>\n')),(0,o.kt)("h2",{id:"api-breaking-changes"},"API Breaking Changes"),(0,o.kt)("h3",{id:"appendto-and-appendmode"},(0,o.kt)("inlineCode",{parentName:"h3"},"appendTo")," and ",(0,o.kt)("inlineCode",{parentName:"h3"},"appendMode")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"[appendTo]")," is an Input that is used to tell NGT where to append the Object3D. Previously, ",(0,o.kt)("inlineCode",{parentName:"p"},"[appendTo]")," accepted either a ",(0,o.kt)("inlineCode",{parentName:"p"},"THREE.Object3D")," instance or a ",(0,o.kt)("inlineCode",{parentName:"p"},"() => THREE.Object3D")," factory. Now, ",(0,o.kt)("inlineCode",{parentName:"p"},"[appendTo]")," accepts a ",(0,o.kt)("inlineCode",{parentName:"p"},"Ref<THREE.Object3D> | THREE.Object3D")," instead (read more about ",(0,o.kt)("a",{parentName:"p",href:"../core/ref"},"Ref documentation"),"). If a ",(0,o.kt)("inlineCode",{parentName:"p"},"THREE.Object3D")," is passed in, that ",(0,o.kt)("inlineCode",{parentName:"p"},"THREE.Object3D")," will be used to create a new ",(0,o.kt)("inlineCode",{parentName:"p"},"Ref"),"."),(0,o.kt)("p",null,"Previously, ",(0,o.kt)("inlineCode",{parentName:"p"},"appendTo")," override ",(0,o.kt)("inlineCode",{parentName:"p"},"appendMode")," except for ",(0,o.kt)("inlineCode",{parentName:"p"},"appendMode = 'none'"),". Now, ",(0,o.kt)("inlineCode",{parentName:"p"},"appendTo")," skips ",(0,o.kt)("inlineCode",{parentName:"p"},"appendMode")," completely regardless of ",(0,o.kt)("inlineCode",{parentName:"p"},"appendMode")," value."),(0,o.kt)("h3",{id:"angular-threecannon-worker-api"},(0,o.kt)("inlineCode",{parentName:"h3"},"@angular-three/cannon")," Worker API"),(0,o.kt)("p",null,"Previously, ",(0,o.kt)("inlineCode",{parentName:"p"},"@angular-three/cannon")," shipped its own version of the Cannon API in a Web Worker. Now, ",(0,o.kt)("inlineCode",{parentName:"p"},"@angular-three/cannon")," is using the framework-agnostic ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pmndrs/use-cannon/tree/master/packages/cannon-worker-api"},"@pmndrs/cannon-web-worker"),"."),(0,o.kt)("p",null,"If you have already been using ",(0,o.kt)("inlineCode",{parentName:"p"},"@angular-three/cannon")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.worker.json"),", please remove ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.worker.json")," (if you don't need it anymore) and remove all references to ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.worker.json")," in your project."),(0,o.kt)("h3",{id:"ngtphysicbody"},(0,o.kt)("inlineCode",{parentName:"h3"},"NgtPhysicBody")),(0,o.kt)("p",null,"Instead of individual directive that can be attached on the template, Body is now an ",(0,o.kt)("inlineCode",{parentName:"p"},"Injectable")," named ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtPhysicBody")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'@Component({\n    template: `\n        <ngt-mesh\n-           ngtPhysicBox\n-           [getPhysicProps]="getBoxProps"\n+           [ref]="boxRef.ref"\n        ></ngt-mesh>\n    `,\n+   providers: [NgtPhysicBody]\n})\nexport class SomeComponent {\n-   getBoxProps: GetByIndex<BoxProps> = () => ({/* ... */});\n\n+   boxRef = this.physicBody.useBox(() => ({/* ... */}));\n+   constructor(private physicBody: NgtPhysicBody) {}\n}\n')),(0,o.kt)("p",null,"To use the ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtPhysicsBodyPublicApi"),", you can use: ",(0,o.kt)("inlineCode",{parentName:"p"},"this.boxRef.api")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"NgtPhysicBody")," depends on ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtStore")," (from ",(0,o.kt)("inlineCode",{parentName:"p"},"ngt-canvas"),") and ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtPhysicsStore")," (from ",(0,o.kt)("inlineCode",{parentName:"p"},"ngt-physics"),") so make sure the component that is providing ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtPhysicBody")," needs to be inside of ",(0,o.kt)("inlineCode",{parentName:"p"},"ngt-canvas")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ngt-physics"),".")),(0,o.kt)("h3",{id:"ngtphysicconstraint"},(0,o.kt)("inlineCode",{parentName:"h3"},"NgtPhysicConstraint")),(0,o.kt)("p",null,"Instead of individual directive that can be attached on the template, Constraint is now an ",(0,o.kt)("inlineCode",{parentName:"p"},"Injectable")," named ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtPhysicConstraint")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'@Component({\n    template: `\n-       <ng-container ngtPhysicPointToPointConstraint>\n-           <ngt-mesh ngtPhysicBox [getPhysicProps]="getBoxProps"></ngt-mesh>\n-           <ngt-mesh> ngtPhysicPlane [getPhysicProps]="getPlaneProps"</ngt-mesh>\n-       </ng-container>\n+       <ngt-mesh [ref]="boxRef.ref"></ngt-mesh>\n+       <ngt-mesh [ref]="planeRef.ref"></ngt-mesh>\n    `,\n+   providers: [NgtPhysicConstraint, NgtPhysicBody]\n})\nexport class SomeComponent {\n\n+   boxRef = this.physicBody.useBox();\n+   planeRef = this.physicBody.usePlane();\n\n+   constructor(\n+       private physicConstraint: NgtPhysicConstraint,\n+       private physicBody: NgtPhysicBody\n+   ) {\n+   }\n\n+   ngOnInit() {\n+       this.physicConstraint.usePointToPointConstraint(this.boxRef.ref, this.planeRef.ref);\n+   }\n}\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"NgtPhysicConstraint")," depends on ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtStore")," (from ",(0,o.kt)("inlineCode",{parentName:"p"},"ngt-canvas"),") and ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtPhysicsStore")," (from ",(0,o.kt)("inlineCode",{parentName:"p"},"ngt-physics"),") so make sure the component that is providing ",(0,o.kt)("inlineCode",{parentName:"p"},"NgtPhysicConstraint")," needs to be inside of ",(0,o.kt)("inlineCode",{parentName:"p"},"ngt-canvas")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ngt-physics"),".")))}g.isMDXComponent=!0}}]);